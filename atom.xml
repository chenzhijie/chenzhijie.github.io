<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenZhijie</title>
  
  <subtitle>My blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-11T05:37:54.624Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChenZhijie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ethereum-blocksync</title>
    <link href="http://yoursite.com/2018/09/11/ethereum-blocksync/"/>
    <id>http://yoursite.com/2018/09/11/ethereum-blocksync/</id>
    <published>2018-09-11T05:37:45.000Z</published>
    <updated>2018-09-11T05:37:54.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以太坊区块同步原理分析"><a href="#以太坊区块同步原理分析" class="headerlink" title="以太坊区块同步原理分析"></a>以太坊区块同步原理分析</h3><p>以太坊区块同步，主要有三个模式 Full, Fast, Light。 其中Full是同步区块头和区块数据。以下分析主要分析核心思路，大致的算法过程。</p><h4 id="一、部分源码分析"><a href="#一、部分源码分析" class="headerlink" title="一、部分源码分析"></a>一、部分源码分析</h4><p>以太坊同步的过程主要是依赖下载器downloader进行同步，通过peer的一些标志来筛选节点。将任务放到优先级队列里面加快同步速度。其他的代码起到辅助作用。</p><p><strong>queue.go :</strong></p><p>优先级队列实现。处理请求，响应的优先级队列。包括同步区块头部和区块body。</p><p><strong>peer.go:</strong></p><p>记录peer的吞吐量，RTT，是否空闲等数据，同时对peer的注册和注销进行管理</p><p><strong>downloader.go:</strong></p><p>主要的下载任务实现逻辑。</p><h4 id="二、FullSync-区块同步过程"><a href="#二、FullSync-区块同步过程" class="headerlink" title="二、FullSync 区块同步过程"></a>二、FullSync 区块同步过程</h4><p>区块头： 根据TD最大值筛选出节点，同步最长链的节点</p><p>同步区块头完成之后，进入fetchbody， 主要三步为：</p><ol><li><p>根据当前计算的TTL 设置超时时间，</p></li><li><p>根据RTT计算该节点可以请求的节点的block的容量capacity</p></li><li><p>根据peerSet返回当前空闲的peer, 并且按照吞吐量排序</p></li></ol><h4 id="三、fetchBodies过程分析"><a href="#三、fetchBodies过程分析" class="headerlink" title="三、fetchBodies过程分析"></a>三、fetchBodies过程分析</h4><p>fetchbodies是同步块的主要函数，通过找到一部分可以使用的节点，向这些节点派送同步区块的任务，并发进行。同时检查是否有存在超时。</p><h4 id="qosTuner-服务"><a href="#qosTuner-服务" class="headerlink" title="qosTuner 服务"></a>qosTuner 服务</h4><p>定时更新RTT。根据impact系数，所有节点的RTT中位数，计算新一轮的RTT。同时更新d.rttConfidence， 以当前的RTT时间作为下一轮开始的delay。</p><h4 id="requestTTL计算过程"><a href="#requestTTL计算过程" class="headerlink" title="requestTTL计算过程"></a>requestTTL计算过程</h4><table><thead><tr><th>参数</th><th>计算</th></tr></thead><tbody><tr><td>d.rttEstimate</td><td>根据qosTuner 服务，定时更新</td></tr><tr><td>d.rttConfidence</td><td>新peer加入，更新conf</td></tr><tr><td>ttlScaling</td><td>3  (定值)</td></tr><tr><td>ttlLimit</td><td>1分钟（定值）</td></tr></tbody></table><h4 id="requestRTT计算过程"><a href="#requestRTT计算过程" class="headerlink" title="requestRTT计算过程"></a>requestRTT计算过程</h4><p>0.9 *d.rttEstimate </p><p>原因是该RTT可能被多次获取，适当降低有利于稳定传输</p><h4 id="四、FullSync时序图"><a href="#四、FullSync时序图" class="headerlink" title="四、FullSync时序图"></a>四、FullSync时序图</h4><div id="sequence-0"></div><p><script src="https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js"></script><script src="https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js"></script><script src="https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">local->peer: handshakepeer->local: handshakeNote over local: pm.synchronise(bestPeer)Note over local: downloader.Synchronise(bestPeer)local->peer: downloader.syncWithPeer(bestPeer)Note over local: downloader.fetchBodies()Note over local: downloader.fetchParts()Note over local: loop idle peerslocal->peer: fetch bodies</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;以太坊区块同步原理分析&quot;&gt;&lt;a href=&quot;#以太坊区块同步原理分析&quot; class=&quot;headerlink&quot; title=&quot;以太坊区块同步原理分析&quot;&gt;&lt;/a&gt;以太坊区块同步原理分析&lt;/h3&gt;&lt;p&gt;以太坊区块同步，主要有三个模式 Full, Fast, Light。
      
    
    </summary>
    
    
      <category term="ethereum" scheme="http://yoursite.com/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>ipfs-p2p-bitswap</title>
    <link href="http://yoursite.com/2018/08/22/ipfs-p2p-bitswap/"/>
    <id>http://yoursite.com/2018/08/22/ipfs-p2p-bitswap/</id>
    <published>2018-08-22T10:49:45.000Z</published>
    <updated>2018-08-23T06:35:39.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IPFS-P2P网络原理-以及-Bitswap的数据交互流程"><a href="#IPFS-P2P网络原理-以及-Bitswap的数据交互流程" class="headerlink" title="IPFS P2P网络原理 以及 Bitswap的数据交互流程"></a>IPFS P2P网络原理 以及 Bitswap的数据交互流程</h3><blockquote><p>关于IPFS的P2P网络相关分析是基于 v0.4.15</p><p>commit: 8671f7bb9f1409a60e97666422ff87017dc4cbfc</p></blockquote><p>首先IPFS执行初始化， 先配置 <code>IPFS_PATH</code> , 比方是当前目录</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export IPFS_PATH = $PWD</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ipfs init</span><br></pre></td></tr></table></figure><p>IPFS初始化时会在本地生成一个默认的 <code>config</code> 文件</p><p>这个config文件会有一些ip和端口的配置，配置的就是本地的 <code>host</code></p><p>然后在 <code>builder.go</code> 文件里的 <code>setupNode</code> 函数会调用 <code>startOnlineServices</code> 将配置文件中的相关信息传参，从而建立IPFS <code>host</code></p><p><code>bitswap</code>  是一个数据块交互的网络实现， 每个IPFS节点有一个bitswap网络。 通过<code>wantmanager</code>进行管理, 而<code>wantmanager</code> 里面又实现了队列机制。 如果队列有消息需要发送的话，首先判断<code>msgQueue</code> 的<code>sender</code>是否为nil，则会先建立连接，生成一个 <code>sender</code> 然后发送数据。</p><p><code>bitswap</code> 的一些操作命令，基本都是查看数据交互过程的一些数据信息展示， 实际操作主要还是利用到 <code>ipfs block get</code> 等相关命令</p><p><code>ipfs block get</code>  后面带着指定的块 <code>cid</code> ， 会先从本地<code>blockstore</code>里面判断是否有指定的块，如果没有则根据当前网络连接的情况， 将所需要的 块 放在 <code>wantlist</code>里面，形成一个 <code>work</code>， 触发当前的 <code>msgQueue</code>的事件循环机制<code>doWork</code> 去执行，发送<code>bitswap</code> 消息 从而从其他节点中获取到需要的块。</p><p>获取一个数据<code>block</code>的时序图</p><div id="sequence-0"></div><p><script src="https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js"></script><script src="https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js"></script><script src="https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">participant Nodeparticipant PeerNote over Node:getCmd -> bitswap.getBlock()Note over Node:generate workNote over Node:work picked by msgQueueNode->Peer: streamMessageSender.SendMsg()Note over Peer: accepted in handleNewStream()Note over Peer: bitswap.ReceiveMessage()Note over Peer: bitswap.engine.MessageReceived()Note over Peer: push entry to peer_request_queueNote over Peer: wantmanager.SendBlock()Peer->Node:bsnet.SendMessage()Note over Node: accepted in handleNewStream()Note over Node: bitswap.ReceiveMessage()Note over Node: put to blockstoreNote over Node: engine.AddBlock()</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;IPFS-P2P网络原理-以及-Bitswap的数据交互流程&quot;&gt;&lt;a href=&quot;#IPFS-P2P网络原理-以及-Bitswap的数据交互流程&quot; class=&quot;headerlink&quot; title=&quot;IPFS P2P网络原理 以及 Bitswap的数据交互流程&quot;&gt;
      
    
    </summary>
    
    
      <category term="ipfs" scheme="http://yoursite.com/tags/ipfs/"/>
    
  </entry>
  
</feed>
